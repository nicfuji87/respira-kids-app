import { supabase } from './supabase';
import type { User } from '@supabase/supabase-js';

/**
 * Tipos
 */
export interface AuthUser extends User {
  pessoa?: {
    id: string;
    nome: string;
    is_approved: boolean;
    profile_complete: boolean;
    role: string | null;
  };
}

export interface SignUpData {
  email: string;
  password: string;
  confirmPassword: string;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface UserStatus {
  isAuthenticated: boolean;
  needsEmailConfirmation: boolean;
  needsApproval: boolean;
  needsProfileCompletion: boolean;
  canAccessDashboard: boolean;
  user: AuthUser | null;
}

/**
 * Cadastro com email/senha
 */
export async function signUpWithEmail(data: SignUpData) {
  const { email, password } = data;

  const { data: authData, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${window.location.origin}/auth/callback`,
    },
  });

  if (error) {
    throw new Error(error.message);
  }

  return authData;
}

/**
 * Login com email/senha
 */
export async function signInWithEmail(data: LoginData) {
  const { email, password } = data;

  const { data: authData, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    throw new Error(error.message);
  }

  return authData;
}

/**
 * Reenviar email de confirma√ß√£o
 */
export async function resendConfirmationEmail(email: string) {
  const { data, error } = await supabase.auth.resend({
    type: 'signup',
    email: email,
  });

  if (error) {
    throw new Error(error.message);
  }

  return data;
}

/**
 * Logout do usu√°rio
 */
export async function signOut() {
  const { error } = await supabase.auth.signOut();
  if (error) {
    throw new Error(error.message);
  }
}

/**
 * Buscar dados da pessoa associada ao usu√°rio
 */
export async function getUserPessoa(userId: string) {
  const { data, error } = await supabase
    .from('pessoas')
    .select('id, nome, is_approved, profile_complete, role')
    .eq('auth_user_id', userId)
    .single();

  if (error && error.code !== 'PGRST116') {
    // PGRST116 = not found
    throw new Error(error.message);
  }

  return data;
}

/**
 * Buscar dados completos do usu√°rio para tela de aprova√ß√£o
 */
export async function getUserApprovalData(userId: string) {
  // Buscar dados do usu√°rio em auth.users
  const { data: authUser, error: authError } =
    await supabase.auth.admin.getUserById(userId);

  if (authError) {
    // Fallback: buscar usu√°rio atual se admin n√£o funcionar
    const {
      data: { user },
      error: currentUserError,
    } = await supabase.auth.getUser();
    if (currentUserError || !user || user.id !== userId) {
      throw new Error('Usu√°rio n√£o encontrado');
    }

    // Usar dados do usu√°rio atual
    const pessoa = await getUserPessoa(userId);

    return {
      email: user.email || '',
      name:
        user.user_metadata?.full_name || user.user_metadata?.name || undefined,
      submittedAt: user.created_at,
      isApproved: pessoa?.is_approved || false,
      profileComplete: pessoa?.profile_complete || false,
      role: pessoa?.role || null,
    };
  }

  // Buscar dados da pessoa associada
  const pessoa = await getUserPessoa(userId);

  return {
    email: authUser.user.email || '',
    name:
      authUser.user.user_metadata?.full_name ||
      authUser.user.user_metadata?.name ||
      undefined,
    submittedAt: authUser.user.created_at,
    isApproved: pessoa?.is_approved || false,
    profileComplete: pessoa?.profile_complete || false,
    role: pessoa?.role || null,
  };
}

/**
 * Reenviar email de notifica√ß√£o (para usu√°rios j√° confirmados)
 */
export async function resendNotificationEmail(userId: string) {
  // Para usu√°rios que j√° t√™m email confirmado,
  // isso seria um email de notifica√ß√£o sobre o status

  // Por enquanto, vamos simular o reenvio
  // Em produ√ß√£o, isso acionaria um webhook ou fun√ß√£o edge

  const { data, error } = await supabase.functions.invoke(
    'send-notification-email',
    {
      body: { userId, type: 'approval_reminder' },
    }
  );

  if (error) {
    // Fallback: se n√£o h√° fun√ß√£o edge, simular sucesso
    console.warn('Fun√ß√£o de email n√£o encontrada, simulando envio:', error);
    return { success: true, message: 'Email de notifica√ß√£o enviado' };
  }

  return data;
}

/**
 * Verificar status completo do usu√°rio
 */
export async function checkUserStatus(user: User | null): Promise<UserStatus> {
  if (!user) {
    return {
      isAuthenticated: false,
      needsEmailConfirmation: false,
      needsApproval: false,
      needsProfileCompletion: false,
      canAccessDashboard: false,
      user: null,
    };
  }

  console.log('üîç Verificando status do usu√°rio:', user.email, user.id);

  // Verificar se email foi confirmado
  const needsEmailConfirmation = !user.email_confirmed_at;

  if (needsEmailConfirmation) {
    console.log('‚ùå Email n√£o confirmado');
    return {
      isAuthenticated: true,
      needsEmailConfirmation: true,
      needsApproval: false,
      needsProfileCompletion: false,
      canAccessDashboard: false,
      user: user as AuthUser,
    };
  }

  // Buscar dados da pessoa
  try {
    const pessoa = await getUserPessoa(user.id);

    if (!pessoa) {
      console.log('‚ùå Pessoa n√£o encontrada, redirecionando para aprova√ß√£o');
      // Pessoa n√£o existe - deve ser criada pelo trigger
      return {
        isAuthenticated: true,
        needsEmailConfirmation: false,
        needsApproval: true,
        needsProfileCompletion: false,
        canAccessDashboard: false,
        user: user as AuthUser,
      };
    }

    console.log('‚úÖ Pessoa encontrada:', pessoa);

    const authUser = { ...user, pessoa } as AuthUser;

    // Verificar aprova√ß√£o
    if (!pessoa.is_approved) {
      console.log(
        '‚ö†Ô∏è Usu√°rio n√£o aprovado, redirecionando para pending-approval'
      );
      return {
        isAuthenticated: true,
        needsEmailConfirmation: false,
        needsApproval: true,
        needsProfileCompletion: false,
        canAccessDashboard: false,
        user: authUser,
      };
    }

    // Verificar se perfil est√° completo
    if (!pessoa.profile_complete) {
      console.log(
        '‚ö†Ô∏è Perfil n√£o completo, redirecionando para complete-profile'
      );
      return {
        isAuthenticated: true,
        needsEmailConfirmation: false,
        needsApproval: false,
        needsProfileCompletion: true,
        canAccessDashboard: false,
        user: authUser,
      };
    }

    // Usu√°rio pode acessar dashboard
    console.log('‚úÖ Usu√°rio pode acessar dashboard');
    return {
      isAuthenticated: true,
      needsEmailConfirmation: false,
      needsApproval: false,
      needsProfileCompletion: false,
      canAccessDashboard: true,
      user: authUser,
    };
  } catch (error) {
    console.error('‚ùå Erro ao verificar status do usu√°rio:', error);

    // Em caso de erro, assumir que precisa de aprova√ß√£o
    return {
      isAuthenticated: true,
      needsEmailConfirmation: false,
      needsApproval: true,
      needsProfileCompletion: false,
      canAccessDashboard: false,
      user: user as AuthUser,
    };
  }
}

/**
 * Obter sess√£o atual
 */
export async function getSession() {
  const {
    data: { session },
    error,
  } = await supabase.auth.getSession();

  if (error) {
    throw new Error(error.message);
  }

  return session;
}

/**
 * Obter usu√°rio atual
 */
export async function getCurrentUser() {
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();

  // Se n√£o h√° usu√°rio ou erro de sess√£o, retornar null ao inv√©s de erro
  if (error && error.message === 'Auth session missing!') {
    return null;
  }

  if (error) {
    throw new Error(error.message);
  }

  return user;
}
