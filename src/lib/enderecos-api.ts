import { supabase } from './supabase';
import type {
  Endereco,
  EnderecoCreateInput,
  EnderecoUpdateInput,
  ApiResponse,
  PaginatedResponse,
  SystemEntityFilters,
} from '@/types/system-config';

// AI dev note: API para gerenciamento de endere√ßos com integra√ß√£o ViaCEP
// Segue padr√£o das outras system APIs mas inclui funcionalidade de busca por CEP

// === INTERFACES AUXILIARES ===
interface ViaCepResponse {
  cep: string;
  logradouro: string;
  complemento: string;
  bairro: string;
  localidade: string;
  uf: string;
  ibge: string;
  gia: string;
  ddd: string;
  siafi: string;
  erro?: boolean;
}

export interface EnderecoViaCepData {
  cep: string;
  logradouro: string;
  bairro: string;
  cidade: string;
  estado: string;
}

// === BUSCA POR CEP ===

/**
 * Buscar endere√ßo por CEP usando ViaCEP
 */
export async function fetchAddressByCep(
  cep: string
): Promise<ApiResponse<EnderecoViaCepData>> {
  try {
    // Limpar formata√ß√£o do CEP
    const cleanCep = cep.replace(/\D/g, '');

    if (cleanCep.length !== 8) {
      return {
        success: false,
        error: 'CEP deve ter 8 d√≠gitos',
      };
    }

    console.log('üîç Buscando CEP na ViaCEP:', cleanCep);

    const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);

    if (!response.ok) {
      return {
        success: false,
        error: 'Erro ao consultar CEP na ViaCEP',
      };
    }

    const data: ViaCepResponse = await response.json();

    if (data.erro) {
      return {
        success: false,
        error: 'CEP n√£o encontrado',
      };
    }

    const enderecoData: EnderecoViaCepData = {
      cep: data.cep,
      logradouro: data.logradouro,
      bairro: data.bairro,
      cidade: data.localidade,
      estado: data.uf,
    };

    console.log('‚úÖ Endere√ßo encontrado na ViaCEP:', enderecoData);

    return {
      success: true,
      data: enderecoData,
    };
  } catch (error) {
    console.error('‚ùå Erro ao buscar CEP:', error);
    return {
      success: false,
      error: 'N√£o foi poss√≠vel consultar o CEP',
    };
  }
}

// === CRUD OPERATIONS ===

/**
 * Buscar todos os endere√ßos com filtros
 */
export async function fetchEnderecos(
  filters: SystemEntityFilters = {}
): Promise<ApiResponse<PaginatedResponse<Endereco>>> {
  try {
    console.log('üîç Buscando endere√ßos com filtros:', filters);

    let query = supabase.from('enderecos').select('*', { count: 'exact' });

    // Aplicar filtro de busca
    if (filters.search) {
      query = query.or(
        `cep.ilike.%${filters.search}%,logradouro.ilike.%${filters.search}%,bairro.ilike.%${filters.search}%,cidade.ilike.%${filters.search}%`
      );
    }

    // Ordena√ß√£o
    const sortBy = filters.sortBy || 'cidade';
    const sortOrder = filters.sortOrder || 'asc';
    query = query.order(sortBy, { ascending: sortOrder === 'asc' });

    // Pagina√ß√£o
    const page = filters.page || 1;
    const limit = filters.limit || 10;
    const offset = (page - 1) * limit;

    query = query.range(offset, offset + limit - 1);

    const { data, error, count } = await query;

    if (error) {
      console.error('‚ùå Erro ao buscar endere√ßos:', error);
      return {
        success: false,
        error: `Erro ao buscar endere√ßos: ${error.message}`,
      };
    }

    const totalPages = count ? Math.ceil(count / limit) : 0;

    console.log('‚úÖ Endere√ßos encontrados:', data?.length || 0);

    return {
      success: true,
      data: {
        data: data || [],
        total: count || 0,
        page,
        limit,
        totalPages,
      },
    };
  } catch (error) {
    console.error('‚ùå Erro inesperado ao buscar endere√ßos:', error);
    return {
      success: false,
      error: 'Erro inesperado ao buscar endere√ßos',
    };
  }
}

/**
 * Criar novo endere√ßo
 */
export async function createEndereco(
  enderecoData: EnderecoCreateInput
): Promise<ApiResponse<Endereco>> {
  try {
    // AI dev note: Normalizar CEP removendo caracteres n√£o num√©ricos
    const cepNormalizado = enderecoData.cep.replace(/\D/g, '');
    const enderecoNormalizado = { ...enderecoData, cep: cepNormalizado };

    console.log('‚ûï Criando endere√ßo:', enderecoNormalizado);

    // Verificar se j√° existe endere√ßo com mesmo CEP
    const { data: existing } = await supabase
      .from('enderecos')
      .select('id')
      .eq('cep', cepNormalizado)
      .single();

    if (existing) {
      return {
        success: false,
        error: 'J√° existe um endere√ßo cadastrado com este CEP',
      };
    }

    const { data, error } = await supabase
      .from('enderecos')
      .insert(enderecoNormalizado)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao criar endere√ßo:', error);

      // Tratar erros espec√≠ficos
      if (error.code === '23505') {
        return {
          success: false,
          error: 'CEP j√° existe no sistema',
        };
      }

      return {
        success: false,
        error: `Erro ao criar endere√ßo: ${error.message}`,
      };
    }

    console.log('‚úÖ Endere√ßo criado:', data);

    return {
      success: true,
      data,
    };
  } catch (error) {
    console.error('‚ùå Erro inesperado ao criar endere√ßo:', error);
    return {
      success: false,
      error: 'Erro inesperado ao criar endere√ßo',
    };
  }
}

/**
 * Atualizar endere√ßo existente
 */
export async function updateEndereco(
  enderecoData: EnderecoUpdateInput
): Promise<ApiResponse<Endereco>> {
  try {
    console.log('‚úèÔ∏è Atualizando endere√ßo:', enderecoData);

    const { id, ...updateData } = enderecoData;

    // AI dev note: Normalizar CEP se fornecido
    if (updateData.cep) {
      updateData.cep = updateData.cep.replace(/\D/g, '');
    }

    // Se est√° alterando o CEP, verificar se n√£o existe outro endere√ßo com o mesmo CEP
    if (updateData.cep) {
      const { data: existing } = await supabase
        .from('enderecos')
        .select('id')
        .eq('cep', updateData.cep)
        .neq('id', id)
        .single();

      if (existing) {
        return {
          success: false,
          error: 'J√° existe outro endere√ßo cadastrado com este CEP',
        };
      }
    }

    const { data, error } = await supabase
      .from('enderecos')
      .update({
        ...updateData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao atualizar endere√ßo:', error);
      return {
        success: false,
        error: `Erro ao atualizar endere√ßo: ${error.message}`,
      };
    }

    console.log('‚úÖ Endere√ßo atualizado:', data);

    return {
      success: true,
      data,
    };
  } catch (error) {
    console.error('‚ùå Erro inesperado ao atualizar endere√ßo:', error);
    return {
      success: false,
      error: 'Erro inesperado ao atualizar endere√ßo',
    };
  }
}

/**
 * Excluir endere√ßo
 */
export async function deleteEndereco(
  id: string
): Promise<ApiResponse<boolean>> {
  try {
    console.log('üóëÔ∏è Verificando depend√™ncias para excluir endere√ßo:', id);

    // Verificar se o endere√ßo est√° sendo usado
    const dependencyChecks = [
      // Verificar pessoas usando este endere√ßo
      { table: 'pessoas', column: 'id_endereco', name: 'pessoas' },
      // Verificar locais de atendimento usando este endere√ßo
      {
        table: 'locais_atendimento',
        column: 'id_endereco',
        name: 'locais de atendimento',
      },
    ];

    for (const check of dependencyChecks) {
      const { data, error } = await supabase
        .from(check.table)
        .select('id')
        .eq(check.column, id)
        .limit(1);

      if (error) {
        console.error(
          `‚ùå Erro ao verificar depend√™ncia ${check.table}:`,
          error
        );
        return {
          success: false,
          error: `Erro ao verificar depend√™ncias: ${error.message}`,
        };
      }

      if (data && data.length > 0) {
        return {
          success: false,
          error: `N√£o √© poss√≠vel excluir este endere√ßo porque ele est√° sendo usado por ${check.name}`,
        };
      }
    }

    // Se n√£o h√° depend√™ncias, pode excluir
    const { error } = await supabase.from('enderecos').delete().eq('id', id);

    if (error) {
      console.error('‚ùå Erro ao excluir endere√ßo:', error);
      return {
        success: false,
        error: `Erro ao excluir endere√ßo: ${error.message}`,
      };
    }

    console.log('‚úÖ Endere√ßo exclu√≠do com sucesso');

    return {
      success: true,
      data: true,
    };
  } catch (error) {
    console.error('‚ùå Erro inesperado ao excluir endere√ßo:', error);
    return {
      success: false,
      error: 'Erro inesperado ao excluir endere√ßo',
    };
  }
}
